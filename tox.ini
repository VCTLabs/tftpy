[tox]
envlist = py3{7,8,9,10,11}-{linux,macos,windows},coverage
skip_missing_interpreters = true
isolated_build = true
skipsdist = true

[gh-actions]
python =
    3.7: py37
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311

[gh-actions:env]
PLATFORM =
    ubuntu-20.04: linux
    macos-latest: macos
    windows-latest: windows

[base]
deps =
    pip>=21.1
    setuptools_scm[toml]

[build]
deps =
    pip>=21.1
    build
    twine

[testenv]
skip_install = true

passenv =
    DISPLAY
    XAUTHORITY
    HOME
    USERNAME
    USER
    XDG_*
    TWINE_*
    CI
    OS
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

setenv =
    COV_CORE_SOURCE=tftpy
    COV_CORE_CONFIG={toxinidir}/pyproject.toml
    COV_CORE_DATAFILE={toxinidir}/.coverage
    PYTHONIOENCODING=UTF-8
    PIP_DISABLE_PIP_VERSION_CHECK=1
    PYTHONPATH={toxinidir}
    COVERAGE_FILE=.coverage.{envname}

allowlist_externals =
    bash
    git

deps =
    {[base]deps}
    #-r requirements.txt
    pytest
    pytest-cov
    -e .

commands =
    python -m pytest -v t/ --cov=tftpy --cov-report term-missing --junitxml=build/results.xml --cov-report=xml {posargs}
    #python -m pytest -v t/ --cov-branch --cov-report term-missing {posargs}

[testenv:coverage]
basepython =
    python3

skip_install =
    true

allowlist_externals =
    bash

deps =
    coverage

commands =
    bash -c 'coverage combine .coverage.py*'
    coverage xml

depends =
    py37
    py38
    py39
    py310
    py311

[coverage:run]
parallel=True

[testenv:lint]
passenv =
    CI
    OS
    PIP_DOWNLOAD_CACHE
    PYTHONIOENCODING

allowlist_externals =
    bash

deps =
    {[base]deps}
    pylint
    six

commands_pre =
    # need to generate version info in a fresh checkout
    bash -c '[[ -f tftpy/_version.py ]] || python setup.py egg_info'

commands =
    pylint --fail-under=7.75 --ignore=_version.py tftpy/

[testenv:build]
passenv =
    pythonLocation
    CI
    GITHUB*
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

allowlist_externals = bash

deps =
    {[build]deps}

commands =
    python -m build .
    twine check dist/*

[testenv:check]
skip_install = true

passenv =
    pythonLocation
    CI
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

allowlist_externals =
    bash

deps =
    pip>=21.2

commands =
    pip install tftpy --pre --prefer-binary -f dist/

[testenv:docs]
skip_install = true
allowlist_externals =
    bash
    make

deps =
    {[base]deps}
    sphinx
    recommonmark
    sphinx_rtd_theme
    sphinx_git
    -e .

commands = make -C doc html

[testenv:docs-lint]
skip_install = true
allowlist_externals =
    {[testenv:docs]allowlist_externals}

deps =
    {[testenv:docs]deps}

commands = make -C doc linkcheck

[testenv:changes]
skip_install = true
allowlist_externals =
    {[testenv:docs]allowlist_externals}

passenv =
    CI
    OS
    PIP_DOWNLOAD_CACHE
    VERSION

deps =
    {[base]deps}
    git+https://github.com/sarnold/gitchangelog.git@master

commands =
    bash -c 'gitchangelog {posargs} > CHANGELOG.rst'

[testenv:style]
passenv =
    CI
    OS
    PIP_DOWNLOAD_CACHE

deps =
    {[base]deps}
    flake8
    flake8-bugbear

commands_pre =
    {[testenv:lint]commands_pre}

commands =
    flake8 tftpy/

[testenv:mypy]
skip_install = true

setenv = PYTHONPATH = {toxinidir}

deps =
    {[base]deps}
    six
    mypy

commands_pre =
    {[testenv:lint]commands_pre}

commands =
    python -m mypy --follow-imports=normal --install-types \
      --non-interactive tftpy/

[testenv:black]
skip_install = true

setenv = PYTHONPATH = {toxinidir}

deps =
    {[base]deps}
    black

commands =
    black -v -S tftpy/ {posargs}

[testenv:isort]
skip_install = true

setenv = PYTHONPATH = {toxinidir}

deps =
    {[base]deps}
    isort

commands =
    python -m isort tftpy/

[testenv:sec]
skip_install = true
passenv =
    PYTHON
    CI
    OS
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

allowlist_externals = bash

deps =
    {[base]deps}
    bandit

commands =
    bandit -r tftpy/
 
[testenv:publish]
description = Publish package
envdir = {toxworkdir}/build
deps = {[testenv:build]deps}
commands =
    {[testenv:build]commands}
    twine upload dist/*

[testenv:clean]
skip_install = true
allowlist_externals =
    bash

deps =
    pip>=21.2

commands =
    bash -c 'make -C doc/ clean'
    bash -c 'rm -rf build dist .coverage* coverage.xml tftpy/_version.py *.egg-info'
