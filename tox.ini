[tox]
envlist = py3{9,10,11,12,13}-{linux,macos,windows},coverage
skip_missing_interpreters = true
isolated_build = true
skipsdist = true

[gh-actions]
python =
    3.9: py39
    3.10: py310
    3.11: py311
    3.12: py312
    3.13: py313

[gh-actions:env]
PLATFORM =
    ubuntu-latest: linux
    macos-latest: macos
    windows-latest: windows

[base]
deps =
    pip>=21.1
    setuptools_scm[toml]

[build]
deps =
    pip>=21.1
    build
    twine

[testenv]
skip_install = true
install_command = pip install {opts} {packages}

passenv =
    DISPLAY
    XAUTHORITY
    HOME
    USERNAME
    USER
    XDG_*
    TWINE_*
    CI
    OS
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

setenv =
    COVERAGE_FILE = .coverage.{envname}

deps =
    {[base]deps}
    pytest
    pytest-cov
    -e .

commands =
    python -m pytest -v tests/ --capture={posargs:fd} --cov=tftpy --cov-branch --cov-report term-missing

[testenv:coverage]
basepython =
    python3

skip_install =
    true

allowlist_externals =
    bash

deps =
    coverage[toml]
    coverage_python_version

commands =
    bash -c 'coverage combine .coverage.py*'
    coverage xml

depends =
    py39
    py310
    py311
    py312
    py313

[coverage:run]
parallel=True
omit =
    */tests/*
    */_version.py

[testenv:lint]
passenv =
    CI
    OS
    PIP_DOWNLOAD_CACHE
    PYTHONIOENCODING

allowlist_externals =
    bash

deps =
    {[base]deps}
    pylint
    -e .

commands =
    pylint --fail-under=7 tftpy/

[testenv:build]
passenv =
    pythonLocation
    CI
    GITHUB*
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

allowlist_externals = bash

deps =
    {[build]deps}

commands =
    python -m build .
    twine check dist/*

[testenv:check]
skip_install = true

passenv =
    pythonLocation
    CI
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

deps =
    pip>=21.2

commands =
    python -m pip install tftpy --pre --force-reinstall --prefer-binary -f dist/
    python -m pip show -f tftpy

[testenv:docs]
skip_install = true
allowlist_externals =
    bash
    make

deps =
    {[base]deps}
    sphinx
    recommonmark
    sphinx_rtd_theme
    sphinx_git
    -e .

commands = make -C doc html

[testenv:docs-lint]
skip_install = true
allowlist_externals =
    {[testenv:docs]allowlist_externals}

deps =
    {[testenv:docs]deps}

commands = make -C doc linkcheck

[testenv:changes]
skip_install = true
allowlist_externals =
    {[testenv:docs]allowlist_externals}

passenv =
    CI
    OS
    PIP_DOWNLOAD_CACHE
    VERSION

deps =
    {[base]deps}
    git+https://github.com/sarnold/gitchangelog.git@master

commands =
    bash -c 'gitchangelog {posargs} > CHANGELOG.rst'

[testenv:style]
passenv =
    CI
    OS
    PIP_DOWNLOAD_CACHE

deps =
    {[base]deps}
    flake8
    flake8-bugbear

commands_pre =
    {[testenv:lint]commands_pre}

commands =
    flake8 tftpy/

[testenv:mypy]
skip_install = true

deps =
    {[base]deps}
    six
    mypy

commands_pre =
    {[testenv:lint]commands_pre}

commands =
    python -m mypy --follow-imports=normal --install-types \
      --non-interactive tftpy/

[testenv:black]
skip_install = true

deps =
    {[base]deps}
    black

commands =
    black -v -S tftpy/ {posargs}

[testenv:isort]
skip_install = true

deps =
    {[base]deps}
    isort

commands =
    python -m isort tftpy/

[testenv:sec]
skip_install = true
passenv =
    PYTHON
    CI
    OS
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

allowlist_externals = bash

deps =
    {[base]deps}
    bandit

commands =
    bandit -r tftpy/

[testenv:publish]
description = Publish package
envdir = {toxworkdir}/build
deps = {[testenv:build]deps}
commands =
    {[testenv:build]commands}
    twine upload dist/*

[testenv:clean]
skip_install = true
allowlist_externals =
    bash

deps =
    pip>=21.2

commands =
    bash -c 'make -C doc/ clean'
    bash -c 'rm -rf build dist .coverage* coverage.xml tftpy/_version.py *.egg-info'
